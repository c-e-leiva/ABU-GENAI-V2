# noticias.py
# M√≥dulo encargado de mostrar las noticias y el clima en la aplicaci√≥n.
# Obtiene el clima actual y el pron√≥stico extendido de una ciudad utilizando la API de OpenWeatherMap.
# Adem√°s, muestra titulares de noticias obtenidos de un feed RSS de Clar√≠n.
# Utiliza el m√≥dulo `feedparser` para leer el RSS y `requests` para consultar la API de OpenWeatherMap.

import streamlit as st
import requests
import feedparser
from datetime import datetime

# Diccionario de d√≠as de la semana en espa√±ol
DIAS_ESP = {
    "Monday": "Lunes", "Tuesday": "Martes", "Wednesday": "Mi√©rcoles", "Thursday": "Jueves",
    "Friday": "Viernes", "Saturday": "S√°bado", "Sunday": "Domingo"
}

# Funci√≥n para obtener el clima actual
def obtener_clima(provincia, openweather_api_key):
    # URL de la API de OpenWeather para obtener el clima actual
    url = f"http://api.openweathermap.org/data/2.5/weather?q={provincia}&appid={openweather_api_key}&units=metric&lang=es"
    response = requests.get(url)
    if response.status_code == 200:  # Si la respuesta es exitosa
        data = response.json()  # Convertir la respuesta JSON
        descripcion = data["weather"][0]["description"]  # Descripci√≥n del clima
        temperatura = data["main"]["temp"]  # Temperatura actual
        return descripcion, temperatura
    return None, None  # Retornar None si hay un error al obtener el clima

# Funci√≥n para obtener el pron√≥stico extendido (pr√≥ximos 5 d√≠as)
def obtener_pronostico(provincia, openweather_api_key):
    # URL para obtener el pron√≥stico extendido
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={provincia}&appid={openweather_api_key}&units=metric&lang=es"
    response = requests.get(url)
    if response.status_code == 200:  # Si la respuesta es exitosa
        return response.json()  # Retornar la respuesta JSON del pron√≥stico
    return None  # Retornar None si no se pudo obtener el pron√≥stico

# Funci√≥n para mostrar las noticias y el clima
def mostrar_noticias(seleccion, provincia, openweather_api_key):
    if seleccion != "Noticias":  # Solo mostrar noticias si se selecciona la opci√≥n de noticias
        return

    st.markdown("#### üì∞ Noticias")  # T√≠tulo para la secci√≥n de noticias

    ahora = datetime.now()  # Obtener la fecha y hora actual
    dia_actual_esp = DIAS_ESP.get(ahora.strftime("%A"), ahora.strftime("%A"))  # Traducir el d√≠a al espa√±ol
    hora_actual = ahora.strftime("%H:%M")  # Formatear la hora actual

    # Mostrar clima actual
    clima, temperatura = obtener_clima(provincia, openweather_api_key)
    if clima and temperatura is not None:  # Si se pudo obtener el clima
        st.info(f"**Clima actual:** {dia_actual_esp}, {hora_actual} hs. **{round(temperatura)}¬∞C**, {clima} en {provincia}")
    else:
        st.error("‚ö†Ô∏è No se pudo obtener el clima actual.")  # Si no se puede obtener el clima, mostrar un error

    # Pron√≥stico extendido (para los pr√≥ximos 2 d√≠as)
    st.markdown("##### üìÜ Pron√≥stico para los pr√≥ximos 2 d√≠as:")
    datos_forecast = obtener_pronostico(provincia, openweather_api_key)  # Obtener el pron√≥stico extendido
    if datos_forecast:
        dias_mostrados = set()  # Para evitar mostrar el mismo d√≠a varias veces
        contador = 0  # Contador para mostrar solo 2 d√≠as de pron√≥stico

        # Iterar sobre las entradas del pron√≥stico
        for entrada in datos_forecast["list"]:
            fecha = datetime.strptime(entrada["dt_txt"], "%Y-%m-%d %H:%M:%S")  # Convertir la fecha a formato datetime
            if fecha.date() > ahora.date():  # Solo mostrar pron√≥sticos futuros
                clave_dia = fecha.strftime("%A %d/%m")  # Formatear la fecha para que no se repita
                if clave_dia not in dias_mostrados:  # Si el d√≠a no ha sido mostrado a√∫n
                    dia_esp = DIAS_ESP.get(fecha.strftime("%A"), fecha.strftime("%A"))  # Traducir al espa√±ol
                    temp = round(entrada["main"]["temp"])  # Redondear la temperatura
                    desc = entrada["weather"][0]["description"]  # Descripci√≥n del clima
                    st.markdown(f"üìÖ {dia_esp} {fecha.strftime('%d/%m')}: {temp}¬∞C, {desc}")  # Mostrar el pron√≥stico
                    dias_mostrados.add(clave_dia)  # Marcar el d√≠a como mostrado
                    contador += 1
                if contador == 2:  # Detenerse despu√©s de mostrar 2 d√≠as
                    break
    else:
        st.warning("‚ö†Ô∏è No se pudo obtener el pron√≥stico extendido.")  # Si no se pudo obtener el pron√≥stico, mostrar advertencia

    # Noticias
    st.markdown("##### üóûÔ∏è Titulares de hoy")
    rss_url = "https://www.clarin.com/rss/"  # URL del RSS de Clarin
    noticias = feedparser.parse(rss_url)  # Parsear el RSS

    # Mostrar las primeras 5 noticias
    for noticia in noticias.entries[:5]:
        st.markdown(f"üîπ [{noticia.title}]({noticia.link})")  # Mostrar cada noticia con su t√≠tulo y enlace
